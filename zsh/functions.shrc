zdbb() {
  cd $HOME/zelus/basketball
  DIR=$(find * -maxdepth 0 -type d -print 2>/dev/null | fzf-tmux) &&
    cd "$DIR"
}
zdg() {
  cd $HOME/zelus/general
  DIR=$(find * -maxdepth 0 -type d -print 2>/dev/null | fzf-tmux) &&
    cd "$DIR"
}
zdes() {
  cd $HOME/zelus/esports
  DIR=$(find * -maxdepth 0 -type d -print 2>/dev/null | fzf-tmux) &&
    cd "$DIR"
}
zdfb() {
  cd $HOME/zelus/football
  DIR=$(find * -maxdepth 0 -type d -print 2>/dev/null | fzf-tmux) &&
    cd "$DIR"
}
zgcp() {
  PROJECT=$(gcloud config configurations list --format json | jq -r ".[] | .name" | fzf-tmux)
  gcloud config configurations activate "$PROJECT"
}
model-dev-tag() {
  GIT_TIMESTAMP=$(date -u "+%Y%m%d.%H%M%S")
  if [[ $# -eq 2 ]]; then
    echo "Tagging and pushing with dev-$1/cthayer/$2-$GIT_TIMESTAMP"
    sleep 3
    git tag dev-$1/cthayer/$2-$GIT_TIMESTAMP
    git push origin dev-$1/cthayer/$2-$GIT_TIMESTAMP
  else
    echo "Error: requires exactly two arguments"
  fi
}
glogone() {
  DEFAULT=10
  NUM_COMMITS="${1:-$DEFAULT}"
  git --no-pager log --oneline -n $NUM_COMMITS
}
killpods() {
  # app=bkrdp-ss, bkrdp-ngss, bkie
  # model=basketball-adjusted-plus-minus
  kubectl delete pods -l $1
}
killjobs() {
  # app=bkrdp-ss, bkrdp-ngss, bkie
  # model=basketball-adjusted-plus-minus
  kubectl delete jobs -l $1
}
wpod() {
  # Arg $1 - seconds to refresh
  # Arg $2 - part of pod name to grep

  watch -n $1 "kubectl get pod | grep $2"
}
wjob() {
  watch -n $1 "kubectl get job | grep $2"
}
zmvbbd() {
  kubectl port-forward svc/zelus-model-versioner -n zelus-model-versioner :80 | cloud_sql_proxy -instances=zelus-basketball-dev:us-central1:basketball-data=tcp:5432
}
dev-tag() {
  # Arg $1 - sport name
  # Arg $2 - dev tag label typically a JIRA ticket number

  GIT_TIMESTAMP=$(date -u "+%Y%m%d.%H%M%S")
  if [[ $# -eq 2 ]]; then
    echo "Tagging and pushing with dev-$1-ct-$2-$GIT_TIMESTAMP"
    sleep 3
    git tag dev-$1-ct-$2-$GIT_TIMESTAMP
    git push origin dev-$1-ct-$2-$GIT_TIMESTAMP
  else
    echo "Error: requires exactly two argument"
  fi
}
release-tag() {
  # Arg $1 - commit SHA to be release tagged
  # Arg $2 - release number
  echo "Checking out and pulling main branch"
  git checkout main
  git pull

  echo "Checking out commit: $1"
  git checkout $1
  git pull origin $1

  GIT_TIMESTAMP=$(date -u "+%Y%m%d.%H%M%S")
  SPORT=basketball
  RELEASE=$2

  echo "Sport: $SPORT; Release: $RELEASE; Timestamp: $GIT_TIMESTAMP"
  echo "Tagging and pushing"
  git tag release-$SPORT-$RELEASE-$GIT_TIMESTAMP
  git push origin release-$SPORT-$RELEASE-$GIT_TIMESTAMP
  echo "Release tag complete"
}

# delete all branches merged into main
dam() {
  echo "=== Deleting all branches (besides main and dev-basketball) ==="
  git checkout main && git branch | egrep -v "(^\*|main)" | egrep -v "(^\*|dev-basketball)" | xargs git branch -D
  echo "‚òëÔ∏è  Done!"
}

# create a new branch
function nb() {
  if [[ $# -eq 0 ]]; then
    echo "Usage: new_branch <jira-ticket>"
    return 1
  fi

  local jira_ticket=$1
  local branch_name="casey/${jira_ticket}"

  # check if branch already exists
  if git rev-parse --git-dir >/dev/null 2>&1; then
    # create and switch to new branch
    git checkout -b "$branch_name"
    echo "Created new branch: $branch_name"

    # push the new branch to remote
    git push -u origin "$branch_name"
    echo "Pushed new branch to remote: $branch_name"
  else
    echo "This command must be run in a git repo"
    return 1
  fi
}

# create commit message including jira ticket ID from branch name
gcj() {
  # Ensure we're inside a Git repository
  if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    echo "This command must be run in a git repository."
    return 1
  fi

  # Extract the JIRA ticket ID from the current branch name
  local branch_name=$(git rev-parse --abbrev-ref HEAD)
  local jira_ticket=$(echo "$branch_name" | grep -oE '[A-Za-z]+-\d+' | head -n 1)

  if [[ -z $jira_ticket ]]; then
    echo "No JIRA ticket ID found in the branch name. Committing without JIRA ticket ID."
    git commit -m "$1"
  else
    local full_message="[$jira_ticket] $1"
    git commit -m "$full_message"
  fi
}

# combined git add and git commit
gagc() {
  git add .
  gc "$1"
}

# bigquery query
function query-gcp() {
  # Define colors
  local RED="\033[0;31m"
  local GREEN="\033[0;32m"
  local NO_COLOR="\033[0m"

  # Accept the SQL query as a parameter
  local query="$1"
  if [[ -z "$query" ]]; then
    echo "Please provide a SQL query as an argument."
    return 1
  fi

  # Step 1: Print the current GCP project
  local current_project=$(gcloud config get-value project 2>/dev/null)
  echo "Current GCP Project: ${RED}$current_project${NO_COLOR}"
  read "response?Is this the project you want to query? (y/n) "
  if [[ "$response" != "y" ]]; then
    echo "Exiting..."
    return 1
  fi

  # Step 2: Calculate the cost and size of the query
  echo "Calculating cost and size of the query..."
  local dry_run_output=$(bq query --use_legacy_sql=false --dry_run --format=prettyjson "$query" 2>&1)
  local query_cost=$(echo "$dry_run_output" | jq '.statistics.query.totalBytesProcessed | tonumber' 2>/dev/null)

  if [[ -z "$query_cost" || "$query_cost" == "null" ]]; then
    echo "Failed to calculate query cost. Error was:"
    echo "$dry_run_output"
    return 1
  fi

  local cost_in_gb=$(bc <<<"scale=2; $query_cost / 1024 / 1024 / 1024")
  local estimated_cost=$(bc <<<"scale=2; $cost_in_gb * 0.01") # Assuming $0.01 per GB
  echo "${GREEN}Estimated cost: \$${estimated_cost} USD${NO_COLOR}"
  echo "Data processed: ${cost_in_gb} GB"

  # Step 3: Ask user if they want to continue
  read "cont?Do you want to continue with this query? (y/n) "
  if [[ "$cont" != "y" ]]; then
    echo "Query cancelled."
    return 1
  fi

  # Step 4: Execute the query and print results
  echo "Executing query..."
  bq query --use_legacy_sql=false "$query"
}

# Example usage: query_gcp "SELECT * FROM your_dataset.your_table LIMIT 10"

function bigquery() {
  # Define colors
  local RED="\033[0;31m"
  local NO_COLOR="\033[0m"

  # Get the current GCP project
  local current_project=$(gcloud config get-value project)

  # Check if a project is set
  if [ -z "$current_project" ]; then
    echo "No GCP project is currently set."
    return 1
  fi

  echo "Opening BigQuery console for ${RED}$current_project${NO_COLOR}"
  read "response?Is this the project you want to query? (y/n) "
  if [[ "$response" != "y" ]]; then
    echo "Exiting..."
    return 1
  fi

  # Define base URL or project-specific URL pattern
  local base_url="https://console.cloud.google.com/"
  local full_url="${base_url}bigquery?project=${current_project}&supportedpurview=project&ws=!1m0"

  # Firefox is not running, start it and open the URL
  open -a firefox "$full_url"
}

function oncall() {
  # Open links for on call inspection
  local looker_dashboard_link="https://lookerstudio.google.com/u/0/reporting/0250a1f8-d774-4bf8-935e-3700fd856765/page/URU7C?s=h6jXziSXFsk"
  local prd_airflow_link="https://airflow-basketball.prod.zelusanalytics.com/home?tags=incremental"
  local stg_airflow_link="https://airflow-basketball.stg.zelusanalytics.com/home?tags=incremental"
  local nba_schedule_link="https://www.nba.com/schedule"

  echo "Opening links for on call inspection..."
  open -a firefox "$looker_dashboard_link" "$nba_schedule_link" "$prd_airflow_link" "$stg_airflow_link"
}

# Function to loop through local Git branches and ask for confirmation to delete
delete_branches() {
  # Colors
  RED='\033[0;31m'
  GREEN='\033[0;32m'
  YELLOW='\033[0;33m'
  BLUE='\033[0;34m'
  NC='\033[0m' # No Color

  # Emojis
  BRANCH_EMOJI="üåø"
  INFO_EMOJI="‚ÑπÔ∏è"
  DELETE_EMOJI="üóëÔ∏è"
  SKIP_EMOJI="‚è≠Ô∏è"

  # Checkout the main branch
  echo -e "${BLUE}Checking out the main branch...${NC}"
  git checkout main

  # Fetch all local branches into an array
  branches=($(git branch --format '%(refname:short)'))

  # Loop through each branch
  for branch in "${branches[@]}"; do
    # Skip the main branch
    if [ "$branch" = "main" ]; then
      echo -e "${SKIP_EMOJI} ${YELLOW}Skipping main branch${NC}"
      continue
    fi

    # Get detailed information about the branch
    branch_info=$(git log -1 --pretty=format:"%h %an <%ae> %ad%n%s" "$branch")

    # Print branch information
    echo -e "${BRANCH_EMOJI} ${BLUE}Branch: ${GREEN}$branch${NC}"
    echo -e "${INFO_EMOJI} ${YELLOW}$branch_info${NC}"
    echo

    # Ask for confirmation to delete the branch
    echo -n -e "${DELETE_EMOJI} ${RED}Do you want to delete the branch '$branch'? (y/n) ${NC}"
    read confirm
    if [ "$confirm" = "y" ]; then
      git branch -d "$branch"
      echo -e "${GREEN}Branch '$branch' deleted.${NC}"
    else
      echo -e "${YELLOW}Branch '$branch' not deleted.${NC}"
    fi
    echo
  done
}
